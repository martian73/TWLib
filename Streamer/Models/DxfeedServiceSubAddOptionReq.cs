/*   This file is part of TWLib.
 *
 *    TWLib is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    TWLib is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with TWLib.  If not, see <https://www.gnu.org/licenses/>.
 ******************************************************************************
 *
 *    Project available from here: https://github.com/martian73/TWLib.git
 ******************************************************************************
 */
// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace TWLib.Streamer.Models
{
    public class DxfeedServiceSubAddOptionReq : DxfeedRequest
    {

        public DxfeedServiceSubAddOptionReq()
        {

        }

        public DxfeedServiceSubAddOptionReq(string clientId, List<string> symbols, int profiles =
            (int)ServiceDataType.THEOPRICE |
            (int)ServiceDataType.QUOTE |
            (int)ServiceDataType.SUMMARY |
            (int)ServiceDataType.TRADE |
            (int)ServiceDataType.GREEKS)
        {
            ClientId = clientId;
            Data = new Data2();
            Data.Add = new Add2();

            if ((profiles & (int)ServiceDataType.GREEKS) > 0)
                Data.Add.Greeks = symbols;

            if ((profiles & (int)ServiceDataType.QUOTE) > 0)
                Data.Add.Quote = symbols;

            if ((profiles & (int)ServiceDataType.SUMMARY) > 0)
                Data.Add.Summary = symbols;

            if ((profiles & (int)ServiceDataType.TRADE) > 0)
                Data.Add.Trade = symbols;

            if ((profiles & (int)ServiceDataType.THEOPRICE) > 0)
                Data.Add.TheoPrice = symbols;

            ClientId = clientId;
            Data = new Data2();
            Data.Add = new Add2();
        }

        // [{"id":4,"clientId":"auroer7g4j8i0wo0k3vl6fahzxei","channel":"/service/sub","data":{"add":{"Quote":[".SPY191004P291",".SPY191004P292"],"Greeks":[".SPY191004P291",".SPY191004P292"],"Trade":[".SPY191004P291",".SPY191004P292"],"Summary":[".SPY191004P291",".SPY191004P292"],"TheoPrice":[".SPY191004P291",".SPY191004P292"]}}}]

        public class Add2
        {
            [JsonProperty("Quote")]
            public IList<string> Quote { get; set; }

            [JsonProperty("Greeks")]
            public IList<string> Greeks { get; set; }

            [JsonProperty("Trade")]
            public IList<string> Trade { get; set; }

            [JsonProperty("Summary")]
            public IList<string> Summary { get; set; }

            [JsonProperty("TheoPrice")]
            public IList<string> TheoPrice { get; set; }

        }

        public class Data2
        {
            [JsonProperty("add")]
            public Add2 Add { get; set; }
        }

        [JsonProperty("clientId")]
        public string ClientId { get; set; }

        [JsonProperty("channel")]
        [JsonConverter(typeof(StringEnumConverter))]
        public override DxfeedChannel Channel { get { return DxfeedChannel.SERVICESUB; } }

        [JsonProperty("data")]
        public Data2 Data { get; set; }

        public override string Serialize()
        {
            DxfeedServiceSubAddOptionReq[] arr = new DxfeedServiceSubAddOptionReq[] { this };
            return JsonConvert.SerializeObject(arr);
        }

        public override TWRequest Deserialize(string json)
        {
            return JsonConvert.DeserializeObject<DxfeedServiceSubAddOptionReq>(json);
        }
    }
}

